# -*- coding: utf-8 -*-
"""Resume _refined_similarity_score

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EE1-Li9YOx92eQNdQYc7UKFWRUMU_1qm
"""

pip install sentence-transformers scikit-learn python-docx PyPDF2

from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
from docx import Document
import PyPDF2
from io import BytesIO
from docx.opc.exceptions import PackageNotFoundError

# Load the pre-trained model
model = SentenceTransformer('paraphrase-MiniLM-L6-v2')

def read_file(file_path):
    """
    Extracts text from a file based on its format (PDF or DOCX).

    Args:
        file_path (str): Path to the file.

    Returns:
        str: Extracted text from the file.
    """
    if file_path.lower().endswith('.pdf'):
        with open(file_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            text = "".join(page.extract_text() for page in reader.pages if page.extract_text())
        return text
    elif file_path.lower().endswith('.docx'):
        try:
            doc = Document(file_path)
            text = "\n".join(paragraph.text for paragraph in doc.paragraphs)
            return text
        except PackageNotFoundError:
            raise ValueError("The provided content is not a valid .docx file.")
    else:
        raise ValueError("Unsupported file format. Only 'pdf' and 'docx' are supported.")

def calculate_similarity(jd_text, resume_text):
    """
    Calculate cosine similarity between job description and resume text embeddings.

    Args:
        jd_text (str): Text content of the job description.
        resume_text (str): Text content of the resume.

    Returns:
        float: Similarity score as a percentage.
    """
    jd_embedding = model.encode([jd_text])
    resume_embedding = model.encode([resume_text])

    # Compute cosine similarity
    similarity_score = cosine_similarity(jd_embedding, resume_embedding)[0][0]

    # Return similarity as a percentage
    return similarity_score * 100  # Convert to percentage

def process_files(JD_file_path, Resume_file_Path):
    """
    Main function to calculate the similarity score between a resume and a job description.

    Args:
        JD_file_path (str): Path to the job description file.
        Resume_file_Path (str): Path to the resume file.

    Returns:
        float: Similarity score as a percentage.
    """
    try:
        # Extract text from the files (resume and job description)
        jd_text = read_file(JD_file_path)
        resume_text = read_file(Resume_file_Path)

        # Calculate and return the similarity score
        return calculate_similarity(jd_text, resume_text)

    except Exception as e:
        print(f"Error: {e}")
        return None
