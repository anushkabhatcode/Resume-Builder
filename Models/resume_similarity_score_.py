# -*- coding: utf-8 -*-
"""Refined_resume_similarity

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O1b05xuRcm16QpeXlbWZs0mNMtj1AhL9
"""

!pip install pypdf2  # Install the PyPDF2 library
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
from docx import Document # Import Document after installing the package
import PyPDF2 # Now you should be able to import it
from io import BytesIO
from docx.opc.exceptions import PackageNotFoundError

model = SentenceTransformer('paraphrase-MiniLM-L6-v2')

def read_file(file_content, file_type):
    """
    Reads the content of a file from its binary content. Supports .pdf and .docx formats.

    Args:
        file_content (BytesIO): Binary content of the file.
        file_type (str): File type (e.g., 'pdf', 'docx').

    Returns:
        str: Extracted text from the file.
    """
    if file_type.lower() == 'pdf':
        reader = PyPDF2.PdfReader(file_content)
        text = "".join(page.extract_text() for page in reader.pages)
        return text
    elif file_type.lower() == 'docx':
        try:
            doc = Document(file_content)
            text = "\n".join(paragraph.text for paragraph in doc.paragraphs)
            return text
        except PackageNotFoundError:
            raise ValueError("The provided content is not a valid .docx file.")
    else:
        raise ValueError("Unsupported file format. Only 'pdf' and 'docx' are supported.")

def calculate_similarity(jd_text, resume_text):
    """
    Calculate cosine similarity between job description and resume text embeddings.

    Args:
        jd_text (str): Text content of the job description.
        resume_text (str): Text content of the resume.

    Returns:
        float: Similarity score as a percentage.
    """
    # Generate embeddings for both JD and resume
    jd_embedding = model.encode([jd_text])
    resume_embedding = model.encode([resume_text])

    # Compute cosine similarity
    similarity_score = cosine_similarity(jd_embedding, resume_embedding)[0][0]

    # Return similarity as a percentage
    return similarity_score * 100

def process_files(jd_file_content, jd_file_type, resume_file_content, resume_file_type):
    """
    Main function to calculate similarity between a job description and resume.

    Args:
        jd_file_content (BytesIO): Binary content of the job description file.
        jd_file_type (str): File type of the job description ('pdf' or 'docx').
        resume_file_content (BytesIO): Binary content of the resume file.
        resume_file_type (str): File type of the resume ('pdf' or 'docx').

    Returns:
        float: Similarity score as a percentage.
    """
    try:
        # Read the JD and resume contents
        jd_text = read_file(jd_file_content, jd_file_type)
        resume_text = read_file(resume_file_content, resume_file_type)

        # Calculate similarity
        return calculate_similarity(jd_text, resume_text)

    except Exception as e:
        print(f"Error: {e}")
        return None
